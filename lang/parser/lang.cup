// Guilherme Ferreira 19.2.8981
//Breno Rotte 20.1.8124

package lang.parser;

import java_cup.runtime.*;
import lang.ast.*;
import lang.ast.command.*;
import lang.ast.expr.*;
import lang.ast.types.*;
import lang.ast.decl.*;
import lang.ast.reserved.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.lang.*;

class LangParser;
parser code {:
    // Connect this parser to a scanner!
    LangLexer s;
    public LangParser(LangLexer s){ this.s=s; }
    // Get the line
:}

init with {:               :};
scan with {: return s.nextToken(); :};

/* define how to connect to the scanner! */

/*
   Terminais
*/

// Simbolos
terminal LBRACE, RBRACE; // { e }
terminal LPAREN, RPAREN; // ( e )
terminal LBRACKET, RBRACKET; // [ e ]
terminal COMMA;         // ,
terminal SEMICOLON;     // ;
terminal COLON;         // :
terminal DOUBLE_COLON;  // ::
terminal DOT;           // .
terminal ATBR;        // =

// Operadores aritméticos
terminal PLUS, SUB;   // + e -
terminal MULT, DIV, MOD; // *, / e %

// Operadores de comparação
terminal EQ, NEQ;       // == e !=
terminal LT, GT;        // < e >

// Operadores lógicos
terminal AND;       // && 
terminal NOT;       // !

terminal Integer INT_LITERAL;        // our scanner provides numbers as integers
terminal Float FLOAT_LITERAL;
terminal Character CHAR_LITERAL;
terminal Boolean TRUE,FALSE;
terminal Object NULL;
terminal String ID;
terminal String TYID;

// Palavras reservadas
terminal DATA;
terminal INT_TYPE;      // Tipo Int
terminal CHAR_TYPE;     // Tipo Char
terminal BOOL_TYPE;     // Tipo Bool
terminal FLOAT_TYPE;    // Tipo Float
terminal IF;            // if
terminal ELSE;          // else
terminal ITERATE;       // iterate
terminal READ;          // read
terminal RETURN;        // return
terminal PRINT;         // print
terminal NEW;           // new

/* Non terminals */
non terminal Program prog;
non terminal Data data;
non terminal List<Data> dataList;
non terminal FunDef func;
non terminal List<FunDef> funcList;
non terminal Decl decl;
non terminal List<Decl> declList;
non terminal Type type;
non terminal Type btype;
non terminal Block block;           // Corpo de função (bloco de comandos)
non terminal StmtBlock stmtBlock;
non terminal List<Cmd> cmdList;     // Lista de comandos dentro de um bloco
non terminal Cmd cmd;  
non terminal List<Param> paramList; // Lista de parâmetros
non terminal List<Type> typeList; // Lista de tipos
non terminal LValue lvalue;
non terminal List<Exp> lvaluelist;
non terminal List<Exp> expList;     // Lista de expressões
non terminal LoopCond loopCond;     // Condição de repetição em loops
non terminal Exp exp;
non terminal Exp rexp;
non terminal Exp aexp;
non terminal Exp mexp;
non terminal Exp sexp;
non terminal Exp pexp;

/*
  Precencia e associatividade dos operadores.
  Lista em ordem dos de menor prioridade para os de maior
  prioridade.
*/

/*
  Precencia e associatividade dos operadores.
  Lista em ordem dos de menor prioridade para os de maior
  prioridade.
*/

precedence left AND;
precedence left EQ, NEQ;
precedence nonassoc GT, LT;
precedence left PLUS, SUB;
precedence left MULT, DIV, MOD;
precedence right NOT, SUB;
precedence left RPAREN, RBRACKET;

precedence nonassoc ELSE;

/* The grammar rules */

prog ::= dataList:d funcList:f {: RESULT = new Program(dleft,dright,d,f); :};

dataList ::= dataList:dl data:d {: dl.add(d); RESULT = dl; :}
       |  {: RESULT = new ArrayList<Data>(); :};

funcList ::= funcList:fl func:f {: fl.add(f); RESULT = fl; :}
       |  {: RESULT = new ArrayList<FunDef>(); :};

data ::= DATA:dt TYID:ty LBRACE declList:del RBRACE {: RESULT = new Data(dtleft,dtright,ty,del); :};

func ::= ID:i LPAREN paramList:params RPAREN COLON typeList:tl block:b {: RESULT = new FunDef(ileft, iright, i, params, tl, b); :}
       |  ID:i LPAREN paramList:params RPAREN block:b {: RESULT = new FunDef(ileft, iright, i, params, null, b); :}
       |  ID:i LPAREN RPAREN COLON typeList:tl block:b {: RESULT = new FunDef(ileft, iright, i, null, tl, b); :}
       |  ID:i LPAREN RPAREN block:b {: RESULT = new FunDef(ileft, iright, i, null, null, b); :};

declList ::= declList:dl decl:d {: dl.add(d); RESULT = dl; :}
       |  {: RESULT = new ArrayList<Decl>(); :};

decl ::= ID:i DOUBLE_COLON type:ty SEMICOLON {: RESULT = new Decl(ileft,iright,i,ty); :};

typeList ::= typeList:tl COMMA type:t {: tl.add(t); RESULT = tl; :}
       |  type:t {: List<Type> l = new ArrayList<Type>(); l.add(t); RESULT = l; :};

type ::= type LBRACKET RBRACKET
       | btype:b {: RESULT = b; :};

btype ::= INT_TYPE:it {: RESULT = new TyInt(itleft, itright); :}
       | CHAR_TYPE:ct {: RESULT = new TyChar(ctleft, ctright); :}
       | BOOL_TYPE:bt {: RESULT = new TyBool(btleft, btright); :}
       | FLOAT_TYPE:ft {: RESULT = new TyFloat(ftleft, ftright); :}
       | TYID:ty {: RESULT = new TyId(tyleft, tyright, ty); :};


stmtBlock ::= block:bk {: RESULT = new StmtBlock(bkleft,bkright,bk.getCommands()); :}
       | cmd:c {: RESULT = new StmtBlock(cleft,cright,Arrays.asList(c)); :};

cmdList ::= cmdList:cl cmd:c {: cl.add(c); RESULT = cl; :}
       | {: RESULT = new ArrayList<Cmd>(); :};


cmd ::=  IF:i LPAREN exp:e RPAREN stmtBlock:sb {: RESULT = new If(ileft,iright, e, sb); :}
       | IF:i LPAREN exp:e RPAREN stmtBlock:sbt ELSE stmtBlock:sbf  {: RESULT = new IfElse(ileft,iright, e, sbt, sbf); :}
       | ITERATE:it LPAREN loopCond:lc RPAREN stmtBlock:stmt {: RESULT = new IterateCmd(itleft,itright, lc, stmt); :}
       | READ:r lvalue:lv SEMICOLON {: RESULT = new ReadCmd(rleft,rright, lv); :}
       | PRINT:p exp:e SEMICOLON {: RESULT = new PrintCmd(pleft,pright, e); :}
       | RETURN:r expList:exps SEMICOLON {: RESULT = new ReturnCmd(rleft, rright, exps); :}
       | lvalue:lv ATBR exp:e SEMICOLON {: RESULT = new AssignCmd(lvleft, lvright, lv, e); :}
       | ID:i LPAREN expList:e2 RPAREN LT lvaluelist:ll GT SEMICOLON{: RESULT = new CallCmd(ileft, iright, i, e2, ll); :}
       | ID:i LPAREN expList:e2 RPAREN SEMICOLON{: RESULT = new CallCmd(ileft, iright, i, e2, null); :};


lvalue ::= ID:id {: RESULT = new LValue(idleft, idright, id); :}
         | lvalue:lv LBRACKET exp:e RBRACKET {: RESULT = new ArrayAccess(lvleft, lvright, lv, e); :}
         | lvalue:lv DOT ID:id {: RESULT = new FieldAccess(lvleft, lvright, lv, id); :};

lvaluelist ::= lvaluelist:ll COMMA lvalue:lv {: ll.add(lv); RESULT = ll; :}
           | lvalue:lv {: List<Exp> l = new ArrayList<>(); l.add(lv); RESULT = l; :};

paramList ::= paramList:pl COMMA ID:i DOUBLE_COLON type:t {: pl.add(new Param(ileft, iright, i, t)); RESULT = pl; :}
           | ID:i DOUBLE_COLON type:t {: List<Param> p = new ArrayList<>(); p.add(new Param(ileft, iright, i, t)); RESULT = p; :}
           | {: RESULT = new ArrayList<Param>(); :};

block ::= LBRACE cmdList:cl RBRACE {: RESULT = new Block(clleft, clright, cl); :};

//crias explist que nao recebe nada, que permite lista vazia

expList ::=  expList:el COMMA exp:e {: el.add(e); RESULT = el; :}
       | {: RESULT = new ArrayList<Exp>(); :}
       |  exp:e {: List<Exp> l = new ArrayList<>(); l.add(e); RESULT = l; :};

loopCond ::= ID:i COLON exp:e {: RESULT = new LoopCond(ileft, iright, e); :}
       | exp:e {: RESULT = new LoopCond(eleft, eright, e); :};


exp  ::= exp:e1 AND:an exp:e2 {: RESULT = new AndOperator(anleft,anright,e1,e2); :}
       | rexp:r {: RESULT = r; :};

rexp ::=  aexp:e1 GT:gt aexp:e2 {: RESULT = new GtOperator(gtleft,gtright,e1,e2); :}
       |  aexp:e1 LT:lt aexp:e2 {: RESULT = new LtOperator(ltleft,ltright,e1,e2); :}
       |  rexp:e1 EQ:eq aexp:e2 {: RESULT = new EqOperator(eqleft,eqright,e1,e2); :}
       |  rexp:e1 NEQ:neq aexp:e2 {: RESULT = new NeqOperator(neqleft,neqright,e1,e2); :}
       |  aexp:a {: RESULT = a; :};

aexp  ::= aexp:e1 PLUS:p aexp:e2 {: RESULT = new PlusOperator(pleft,pright,e1,e2); :}
       |  aexp:e1 SUB:u aexp:e2 {: RESULT = new MinusOperator(uleft,uright,e1,e2); :}
       |  mexp:m {: RESULT = m; :};

mexp ::=  mexp:e1 MULT:s mexp:e2 {: RESULT = new MultOperator(sleft,sright,e1,e2); :}
       |  mexp:e1 DIV:d mexp:e2 {: RESULT = new DivOperator(dleft,dright,e1,e2); :}
       |  mexp:e1 MOD:m mexp:e2 {: RESULT = new ModOperator(mleft,mright,e1,e2); :}
       |  sexp:s {: RESULT = s; :};

sexp ::=  NOT:no sexp:e1 {: RESULT = new NotOperator(noleft,noright,e1); :}
       |  SUB:u sexp:e1 {: RESULT = new UnaryMinusOperator(uleft,uright,e1); :}
       |  TRUE:t {: RESULT = new BoolLit(tleft,tright,true); :}
       |  FALSE:f {: RESULT = new BoolLit(fleft,fright,false); :}
       |  NULL:n {: RESULT = new NullLit(nleft,nright,null); :}
       |  INT_LITERAL:n {: RESULT = new IntLit(nleft,nright,n); :}
       |  FLOAT_LITERAL:n {: RESULT = new FloatLit(nleft,nright,n); :}
       |  CHAR_LITERAL:c {: RESULT = new CharLit(cleft,cright,c); :}
       |  pexp:p {: RESULT = p; :};

pexp ::=  LPAREN exp:e RPAREN {: RESULT = e; :}
       |  NEW:n type:t LBRACKET exp:e RBRACKET {: RESULT = new New(nleft,nright,t,e); :}
       |  NEW:n type:t  {: RESULT = new New(nleft,nright,t, null); :}
       |  lvalue:e {: RESULT = e; :}
       |  ID:i LPAREN expList:el RPAREN LBRACKET exp:e2 RBRACKET{: RESULT = new CallExp(ileft, iright, i, el, e2); :};

