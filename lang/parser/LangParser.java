
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lang.parser;

import java_cup.runtime.*;
import lang.ast.*;
import lang.ast.command.*;
import lang.ast.expr.*;
import lang.ast.types.*;
import lang.ast.decl.*;
import lang.ast.reserved.*;
import lang.ast.delimiters.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.lang.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LangParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LangParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public LangParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public LangParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LangParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\006\004\000\002\006\002" +
    "\000\002\003\007\000\002\005\011\000\002\005\007\000" +
    "\002\005\010\000\002\005\006\000\002\010\004\000\002" +
    "\010\002\000\002\007\006\000\002\020\005\000\002\020" +
    "\003\000\002\011\005\000\002\011\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\013\005\000\002\014\003\000\002" +
    "\014\003\000\002\015\004\000\002\015\002\000\002\016" +
    "\007\000\002\016\011\000\002\016\007\000\002\016\005" +
    "\000\002\016\005\000\002\016\006\000\002\016\006\000" +
    "\002\021\003\000\002\021\006\000\002\021\005\000\002" +
    "\017\007\000\002\017\005\000\002\017\002\000\002\024" +
    "\005\000\002\024\003\000\002\025\005\000\002\025\003" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\027\005\000\002" +
    "\027\005\000\002\027\003\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\003\000\002\031\004" +
    "\000\002\031\004\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\005\000\002\032" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\010\002\ufffe\041\ufffe\043\ufffe\001\002\000" +
    "\010\002\ufffc\041\ufffc\043\007\001\002\000\004\002\006" +
    "\001\002\000\004\002\000\001\002\000\004\042\175\001" +
    "\002\000\006\002\001\041\012\001\002\000\010\002\uffff" +
    "\041\uffff\043\uffff\001\002\000\004\006\014\001\002\000" +
    "\006\002\ufffd\041\ufffd\001\002\000\010\007\017\012\uffd9" +
    "\041\015\001\002\000\004\015\173\001\002\000\006\007" +
    "\163\012\162\001\002\000\006\004\020\014\021\001\002" +
    "\000\020\005\uffe6\041\uffe6\050\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\001\002\000\014\042\031\044\030\045\025" +
    "\046\024\047\027\001\002\000\006\002\ufff7\041\ufff7\001" +
    "\002\000\010\004\ufff2\010\036\012\ufff2\001\002\000\014" +
    "\004\uffed\007\uffed\010\uffed\012\uffed\013\uffed\001\002\000" +
    "\014\004\uffee\007\uffee\010\uffee\012\uffee\013\uffee\001\002" +
    "\000\006\004\020\012\033\001\002\000\014\004\uffec\007" +
    "\uffec\010\uffec\012\uffec\013\uffec\001\002\000\014\004\uffef" +
    "\007\uffef\010\uffef\012\uffef\013\uffef\001\002\000\014\004" +
    "\uffeb\007\uffeb\010\uffeb\012\uffeb\013\uffeb\001\002\000\014" +
    "\004\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0\001\002\000" +
    "\014\042\031\044\030\045\025\046\024\047\027\001\002" +
    "\000\006\002\ufff8\041\ufff8\001\002\000\010\004\ufff3\010" +
    "\036\012\ufff3\001\002\000\004\011\037\001\002\000\014" +
    "\004\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\001\002\000" +
    "\020\005\047\041\044\050\043\052\050\053\041\054\046" +
    "\055\045\001\002\000\004\041\044\001\002\000\020\005" +
    "\uffe7\041\uffe7\050\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7" +
    "\001\002\000\004\006\152\001\002\000\012\010\uffde\013" +
    "\uffde\016\uffde\017\uffde\001\002\000\026\006\073\010\074" +
    "\021\065\032\072\033\064\034\070\035\071\036\060\037" +
    "\067\040\063\001\002\000\026\006\073\010\074\021\065" +
    "\032\072\033\064\034\070\035\071\036\060\037\067\040" +
    "\063\001\002\000\024\002\uffea\005\uffea\041\uffea\050\uffea" +
    "\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\001\002\000" +
    "\004\006\133\001\002\000\010\010\053\016\054\017\052" +
    "\001\002\000\026\006\073\010\074\021\065\032\072\033" +
    "\064\034\070\035\071\036\060\037\067\040\063\001\002" +
    "\000\026\006\073\010\074\021\065\032\072\033\064\034" +
    "\070\035\071\036\060\037\067\040\063\001\002\000\004" +
    "\041\055\001\002\000\012\010\uffdc\013\uffdc\016\uffdc\017" +
    "\uffdc\001\002\000\026\007\uffd0\011\uffd0\013\uffd0\020\117" +
    "\021\116\025\uffd0\026\uffd0\027\125\030\126\031\uffd0\001" +
    "\002\000\034\007\uffc0\011\uffc0\013\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\001\002\000\034\007\uffc6\011\uffc6\013\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\001\002\000\034\007\uffc9" +
    "\011\uffc9\013\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\001\002" +
    "\000\006\011\124\031\105\001\002\000\034\007\uffc4\011" +
    "\uffc4\013\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\001\002\000" +
    "\034\007\uffc3\011\uffc3\013\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\001\002\000\026\006\073\010\074\021\065\032\072" +
    "\033\064\034\070\035\071\036\060\037\067\040\063\001" +
    "\002\000\016\007\uffd5\011\uffd5\013\uffd5\025\113\026\114" +
    "\031\uffd5\001\002\000\034\007\uffc5\011\uffc5\013\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\001\002\000\034\007\uffc2\011" +
    "\uffc2\013\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\001\002\000" +
    "\034\007\uffc1\011\uffc1\013\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\001\002\000\026\006\073\010\074\021\065\032\072" +
    "\033\064\034\070\035\071\036\060\037\067\040\063\001" +
    "\002\000\026\006\073\010\074\021\065\032\072\033\064" +
    "\034\070\035\071\036\060\037\067\040\063\001\002\000" +
    "\026\006\073\010\074\021\065\032\072\033\064\034\070" +
    "\035\071\036\060\037\067\040\063\001\002\000\034\007" +
    "\uffcd\011\uffcd\013\uffcd\020\uffcd\021\uffcd\022\077\023\100" +
    "\024\076\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\001" +
    "\002\000\026\006\073\010\074\021\065\032\072\033\064" +
    "\034\070\035\071\036\060\037\067\040\063\001\002\000" +
    "\026\006\073\010\074\021\065\032\072\033\064\034\070" +
    "\035\071\036\060\037\067\040\063\001\002\000\026\006" +
    "\073\010\074\021\065\032\072\033\064\034\070\035\071" +
    "\036\060\037\067\040\063\001\002\000\034\007\uffcb\011" +
    "\uffcb\013\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\001\002\000" +
    "\034\007\uffcc\011\uffcc\013\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\001\002\000\034\007\uffca\011\uffca\013\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\001\002\000\006\011\106\031\105" +
    "\001\002\000\026\006\073\010\074\021\065\032\072\033" +
    "\064\034\070\035\071\036\060\037\067\040\063\001\002" +
    "\000\034\007\uffbe\011\uffbe\013\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\001\002\000\012\007\uffd6\011\uffd6\013\uffd6\031" +
    "\uffd6\001\002\000\006\007\111\031\105\001\002\000\034" +
    "\007\uffbf\011\uffbf\013\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\001\002\000\034\007\uffc8\011\uffc8\013\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\001\002\000\026\006\073\010\074\021" +
    "\065\032\072\033\064\034\070\035\071\036\060\037\067" +
    "\040\063\001\002\000\026\006\073\010\074\021\065\032" +
    "\072\033\064\034\070\035\071\036\060\037\067\040\063" +
    "\001\002\000\022\007\uffd1\011\uffd1\013\uffd1\020\117\021" +
    "\116\025\uffd1\026\uffd1\031\uffd1\001\002\000\026\006\073" +
    "\010\074\021\065\032\072\033\064\034\070\035\071\036" +
    "\060\037\067\040\063\001\002\000\026\006\073\010\074" +
    "\021\065\032\072\033\064\034\070\035\071\036\060\037" +
    "\067\040\063\001\002\000\034\007\uffcf\011\uffcf\013\uffcf" +
    "\020\uffcf\021\uffcf\022\077\023\100\024\076\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\001\002\000\034\007\uffce" +
    "\011\uffce\013\uffce\020\uffce\021\uffce\022\077\023\100\024" +
    "\076\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\001\002" +
    "\000\022\007\uffd2\011\uffd2\013\uffd2\020\117\021\116\025" +
    "\uffd2\026\uffd2\031\uffd2\001\002\000\034\007\uffc7\011\uffc7" +
    "\013\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\001\002\000\012" +
    "\010\uffdd\013\uffdd\016\uffdd\017\uffdd\001\002\000\026\006" +
    "\073\010\074\021\065\032\072\033\064\034\070\035\071" +
    "\036\060\037\067\040\063\001\002\000\026\006\073\010" +
    "\074\021\065\032\072\033\064\034\070\035\071\036\060" +
    "\037\067\040\063\001\002\000\022\007\uffd4\011\uffd4\013" +
    "\uffd4\020\117\021\116\025\uffd4\026\uffd4\031\uffd4\001\002" +
    "\000\022\007\uffd3\011\uffd3\013\uffd3\020\117\021\116\025" +
    "\uffd3\026\uffd3\031\uffd3\001\002\000\006\013\132\031\105" +
    "\001\002\000\022\005\uffdf\041\uffdf\050\uffdf\051\uffdf\052" +
    "\uffdf\053\uffdf\054\uffdf\055\uffdf\001\002\000\030\006\073" +
    "\010\074\021\065\032\072\033\064\034\070\035\071\036" +
    "\060\037\067\040\063\041\136\001\002\000\004\007\141" +
    "\001\002\000\006\007\uffd7\031\105\001\002\000\004\014" +
    "\137\001\002\000\026\006\073\010\074\021\065\032\072" +
    "\033\064\034\070\035\071\036\060\037\067\040\063\001" +
    "\002\000\006\007\uffd8\031\105\001\002\000\020\004\020" +
    "\041\044\050\043\052\050\053\041\054\046\055\045\001" +
    "\002\000\022\005\uffe8\041\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\001\002\000\022\005\uffe9\041" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\001\002\000\022\005\uffe3\041\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\001\002\000\004\031\105" +
    "\001\002\000\004\013\147\001\002\000\022\005\uffe0\041" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\001\002\000\006\013\151\031\105\001\002\000\022\005" +
    "\uffe1\041\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\001\002\000\026\006\073\010\074\021\065\032" +
    "\072\033\064\034\070\035\071\036\060\037\067\040\063" +
    "\001\002\000\006\007\154\031\105\001\002\000\020\004" +
    "\020\041\044\050\043\052\050\053\041\054\046\055\045" +
    "\001\002\000\022\005\uffe5\041\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\001\002\000\020\004\020" +
    "\041\044\050\043\052\050\053\041\054\046\055\045\001" +
    "\002\000\022\005\uffe4\041\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\001\002\000\010\010\053\013" +
    "\161\016\054\001\002\000\022\005\uffe2\041\uffe2\050\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\001\002\000" +
    "\004\041\170\001\002\000\006\004\020\014\164\001\002" +
    "\000\014\042\031\044\030\045\025\046\024\047\027\001" +
    "\002\000\006\002\ufff9\041\ufff9\001\002\000\006\004\020" +
    "\012\033\001\002\000\006\002\ufffa\041\ufffa\001\002\000" +
    "\004\015\171\001\002\000\014\042\031\044\030\045\025" +
    "\046\024\047\027\001\002\000\010\007\uffdb\010\036\012" +
    "\uffdb\001\002\000\014\042\031\044\030\045\025\046\024" +
    "\047\027\001\002\000\010\007\uffda\010\036\012\uffda\001" +
    "\002\000\004\004\176\001\002\000\006\005\ufff5\041\ufff5" +
    "\001\002\000\006\005\202\041\200\001\002\000\004\015" +
    "\203\001\002\000\006\005\ufff6\041\ufff6\001\002\000\010" +
    "\002\ufffb\041\ufffb\043\ufffb\001\002\000\014\042\031\044" +
    "\030\045\025\046\024\047\027\001\002\000\006\010\036" +
    "\013\205\001\002\000\006\005\ufff4\041\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\006\002\004\004\003\001\001\000\006\003" +
    "\010\006\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\021\001\001\000\004\015\037\001\001\000\010\011\022" +
    "\012\031\020\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\034\012\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\041\021\050\001\001\000\004" +
    "\021\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\025\147\026\065\027\055\030\074" +
    "\031\060\032\056\001\001\000\016\025\144\026\065\027" +
    "\055\030\074\031\060\032\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\025\130\026" +
    "\065\027\055\030\074\031\060\032\056\001\001\000\016" +
    "\025\061\026\065\027\055\030\074\031\060\032\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\122\032\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\111" +
    "\032\056\001\001\000\016\025\107\026\065\027\055\030" +
    "\074\031\060\032\056\001\001\000\016\025\103\026\065" +
    "\027\055\030\074\031\060\032\056\001\001\000\002\001" +
    "\001\000\006\031\102\032\056\001\001\000\006\031\101" +
    "\032\056\001\001\000\006\031\100\032\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\025\106\026\065\027\055\030\074\031" +
    "\060\032\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\027\121\030\074\031\060\032\056\001\001\000\012" +
    "\027\114\030\074\031\060\032\056\001\001\000\002\001" +
    "\001\000\010\030\120\031\060\032\056\001\001\000\010" +
    "\030\117\031\060\032\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\027\127\030\074\031\060\032\056\001" +
    "\001\000\012\027\126\030\074\031\060\032\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\024\133\025\134\026\065\027\055" +
    "\030\074\031\060\032\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\025\137\026\065" +
    "\027\055\030\074\031\060\032\056\001\001\000\002\001" +
    "\001\000\012\013\142\014\143\016\141\021\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\025\152\026" +
    "\065\027\055\030\074\031\060\032\056\001\001\000\002" +
    "\001\001\000\012\013\142\014\154\016\141\021\050\001" +
    "\001\000\002\001\001\000\012\013\142\014\156\016\141" +
    "\021\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\164\001\001" +
    "\000\010\011\022\012\031\020\165\001\001\000\002\001" +
    "\001\000\004\013\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\171\012\031\001\001\000\002\001" +
    "\001\000\006\011\173\012\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\176\001\001\000\004\007" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\203\012\031\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LangParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LangParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LangParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
               
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.nextToken(); 
    }


    // Connect this parser to a scanner!
    LangLexer s;
    public LangParser(LangLexer s){ this.s=s; }
    // Get the line


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LangParser$actions {
  private final LangParser parser;

  /** Constructor */
  CUP$LangParser$actions(LangParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LangParser$do_action_part00000000(
    int                        CUP$LangParser$act_num,
    java_cup.runtime.lr_parser CUP$LangParser$parser,
    java.util.Stack            CUP$LangParser$stack,
    int                        CUP$LangParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LangParser$result;

      /* select the action based on the action number */
      switch (CUP$LangParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= dataList funcList 
            {
              Program RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		List<Data> d = (List<Data>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		List<FunDef> f = (List<FunDef>)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Program(dleft,dright,d,f); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		RESULT = start_val;
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LangParser$parser.done_parsing();
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dataList ::= dataList data 
            {
              List<Data> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		List<Data> dl = (List<Data>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Data d = (Data)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("dataList",2, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dataList ::= 
            {
              List<Data> RESULT =null;
		 RESULT = new ArrayList<Data>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("dataList",2, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcList ::= funcList func 
            {
              List<FunDef> RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		List<FunDef> fl = (List<FunDef>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		FunDef f = (FunDef)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 fl.add(f); RESULT = fl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("funcList",4, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funcList ::= 
            {
              List<FunDef> RESULT =null;
		 RESULT = new ArrayList<FunDef>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("funcList",4, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // data ::= DATA TYID LBRACE declList RBRACE 
            {
              Data RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).value;
		int delleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int delright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		List<Decl> del = (List<Decl>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Data(dtleft,dtright,ty,del); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("data",1, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func ::= ID LPAREN paramList RPAREN COLON typeList block 
            {
              FunDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		List<Param> params = (List<Param>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		List<Type> tl = (List<Type>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new FunDef(ileft, iright, i, params, tl, b); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func ::= ID LPAREN paramList RPAREN block 
            {
              FunDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		List<Param> params = (List<Param>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new FunDef(ileft, iright, i, params, null, b); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func ::= ID LPAREN RPAREN COLON typeList block 
            {
              FunDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-5)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		List<Type> tl = (List<Type>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new FunDef(ileft, iright, i, null, tl, b); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-5)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func ::= ID LPAREN RPAREN block 
            {
              FunDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new FunDef(ileft, iright, i, null, null, b); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declList ::= declList decl 
            {
              List<Decl> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("declList",6, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declList ::= 
            {
              List<Decl> RESULT =null;
		 RESULT = new ArrayList<Decl>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("declList",6, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl ::= ID DOUBLE_COLON type SEMICOLON 
            {
              Decl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Decl(ileft,iright,i,ty); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("decl",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // typeList ::= typeList COMMA type 
            {
              List<Type> RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		List<Type> tl = (List<Type>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 tl.add(t); RESULT = tl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("typeList",14, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // typeList ::= type 
            {
              List<Type> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 List<Type> l = new ArrayList<Type>(); l.add(t); RESULT = l; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("typeList",14, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= type LBRACKET RBRACKET 
            {
              Type RESULT =null;

              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= btype 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = b; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // btype ::= INT_TYPE 
            {
              Type RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new TyInt(itleft, itright); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("btype",8, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // btype ::= CHAR_TYPE 
            {
              Type RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new TyChar(ctleft, ctright); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("btype",8, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // btype ::= BOOL_TYPE 
            {
              Type RESULT =null;
		int btleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int btright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Object bt = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new TyBool(btleft, btright); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("btype",8, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // btype ::= FLOAT_TYPE 
            {
              Type RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Object ft = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new TyFloat(ftleft, ftright); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("btype",8, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // btype ::= TYID 
            {
              Type RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new TyId(tyleft, tyright, ty); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("btype",8, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // block ::= LBRACE cmdList RBRACE 
            {
              Block RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		List<Cmd> cl = (List<Cmd>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Block(clleft,clright,cl); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmtBlock ::= block 
            {
              StmtBlock RESULT =null;
		int bkleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int bkright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Block bk = (Block)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new StmtBlock(bkleft,bkright,bk.getCommands()); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("stmtBlock",10, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmtBlock ::= cmd 
            {
              StmtBlock RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Cmd c = (Cmd)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new StmtBlock(cleft,cright,Arrays.asList(c)); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("stmtBlock",10, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cmdList ::= cmdList cmd 
            {
              List<Cmd> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		List<Cmd> cl = (List<Cmd>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Cmd c = (Cmd)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 cl.add(c); RESULT = cl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmdList",11, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cmdList ::= 
            {
              List<Cmd> RESULT =null;
		 RESULT = new ArrayList<Cmd>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmdList",11, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cmd ::= IF LPAREN exp RPAREN stmtBlock 
            {
              Cmd RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		StmtBlock sb = (StmtBlock)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new If(ileft,iright, e, sb); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",12, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cmd ::= IF LPAREN exp RPAREN stmtBlock ELSE stmtBlock 
            {
              Cmd RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int sbtleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int sbtright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		StmtBlock sbt = (StmtBlock)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sbfleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int sbfright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		StmtBlock sbf = (StmtBlock)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new IfElse(ileft,iright, e, sbt, sbf); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",12, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cmd ::= ITERATE LPAREN loopCond RPAREN stmtBlock 
            {
              Cmd RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		LoopCond lc = (LoopCond)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		 RESULT = new IterateCmd(itleft,itright); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",12, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cmd ::= READ lvalue SEMICOLON 
            {
              Cmd RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new ReadCmd(rleft,rright, lv); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",12, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cmd ::= PRINT exp SEMICOLON 
            {
              Cmd RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new PrintCmd(pleft,pright, e); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",12, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cmd ::= RETURN exp expList SEMICOLON 
            {
              Cmd RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		List<Exp> exps = (List<Exp>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new ReturnCmd(rleft, rright, e, exps); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",12, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cmd ::= lvalue ATBR exp SEMICOLON 
            {
              Cmd RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Cmd(lvleft,lvright); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",12, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lvalue ::= ID 
            {
              LValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new LValue(idleft, idright, id); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("lvalue",15, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lvalue ::= lvalue LBRACKET exp RBRACKET 
            {
              LValue RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new ArrayAccess(lvleft, lvright, lv, e); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("lvalue",15, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lvalue ::= lvalue DOT ID 
            {
              LValue RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new FieldAccess(lvleft, lvright, lv, id); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("lvalue",15, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // paramList ::= paramList COMMA ID DOUBLE_COLON type 
            {
              List<Param> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		List<Param> pl = (List<Param>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 pl.add(new Param(ileft, iright, i, t)); RESULT = pl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("paramList",13, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paramList ::= ID DOUBLE_COLON type 
            {
              List<Param> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 List<Param> p = new ArrayList<>(); p.add(new Param(ileft, iright, i, t)); RESULT = p; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("paramList",13, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paramList ::= 
            {
              List<Param> RESULT =null;
		 RESULT = new ArrayList<Param>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("paramList",13, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // loopCond ::= ID COLON exp 
            {
              LoopCond RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new NamedLoopCond(ileft, iright, i, e); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("loopCond",18, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // loopCond ::= exp 
            {
              LoopCond RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new LoopCond(eleft, eright, e); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("loopCond",18, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp AND exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int anleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int anright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object an = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new AndOperator(anleft,anright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= rexp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = r; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rexp ::= aexp GT aexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int gtleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new GtOperator(gtleft,gtright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("rexp",20, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rexp ::= aexp LT aexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new LtOperator(ltleft,ltright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("rexp",20, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // rexp ::= rexp EQ aexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new EqOperator(eqleft,eqright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("rexp",20, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // rexp ::= rexp NEQ aexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int neqleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int neqright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object neq = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new NeqOperator(neqleft,neqright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("rexp",20, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // rexp ::= aexp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = a; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("rexp",20, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // aexp ::= aexp PLUS mexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new PlusOperator(pleft,pright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("aexp",21, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // aexp ::= aexp SUB mexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new MinusOperator(uleft,uright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("aexp",21, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // aexp ::= mexp 
            {
              Exp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp m = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = m; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("aexp",21, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mexp ::= mexp MULT sexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new MultOperator(sleft,sright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("mexp",22, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // mexp ::= mexp DIV sexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new DivOperator(dleft,dright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("mexp",22, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // mexp ::= mexp MOD sexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new ModOperator(mleft,mright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("mexp",22, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // mexp ::= sexp 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("mexp",22, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sexp ::= NOT sexp 
            {
              Exp RESULT =null;
		int noleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object no = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new NotOperator(noleft,noright,e1); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",23, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sexp ::= SUB sexp 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new UnaryMinusOperator(uleft,uright,e1); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",23, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sexp ::= TRUE 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new BoolLit(tleft,tright,true); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",23, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sexp ::= FALSE 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new BoolLit(fleft,fright,false); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",23, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sexp ::= NULL 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new NullLit(nleft,nright,null); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",23, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sexp ::= INT_LITERAL 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new IntLit(nleft,nright,n); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",23, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sexp ::= FLOAT_LITERAL 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new FloatLit(nleft,nright,n); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",23, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sexp ::= CHAR_LITERAL 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new CharLit(cleft,cright,c); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",23, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sexp ::= pexp 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = p; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",23, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // pexp ::= LPAREN exp RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = e; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("pexp",24, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // pexp ::= LBRACKET exp RBRACKET 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = e; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("pexp",24, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LangParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LangParser$do_action(
    int                        CUP$LangParser$act_num,
    java_cup.runtime.lr_parser CUP$LangParser$parser,
    java.util.Stack            CUP$LangParser$stack,
    int                        CUP$LangParser$top)
    throws java.lang.Exception
    {
              return CUP$LangParser$do_action_part00000000(
                               CUP$LangParser$act_num,
                               CUP$LangParser$parser,
                               CUP$LangParser$stack,
                               CUP$LangParser$top);
    }
}

}
