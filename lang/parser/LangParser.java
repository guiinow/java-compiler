
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lang.parser;

import java_cup.runtime.*;
import lang.ast.*;
import lang.ast.command.*;
import lang.ast.expr.*;
import lang.ast.types.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LangParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LangParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public LangParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public LangParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LangParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\004\003\000\002\002\004\000\002\005" +
    "\004\000\002\005\003\000\002\006\006\000\002\006\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\006\012\006\016\004\001\002\000\014\004" +
    "\ufff4\005\ufff4\007\ufff4\010\ufff4\011\ufff4\001\002\000\004" +
    "\010\031\001\002\000\014\006\017\013\016\014\015\015" +
    "\020\016\004\001\002\000\004\002\001\001\002\000\010" +
    "\002\ufffe\012\006\016\004\001\002\000\004\002\012\001" +
    "\002\000\004\002\000\001\002\000\004\002\uffff\001\002" +
    "\000\012\004\ufff5\005\ufff5\007\ufff5\011\ufff5\001\002\000" +
    "\012\004\ufff7\005\ufff7\007\ufff7\011\ufff7\001\002\000\012" +
    "\004\ufff8\005\ufff8\007\ufff8\011\ufff8\001\002\000\014\006" +
    "\017\013\016\014\015\015\020\016\004\001\002\000\012" +
    "\004\ufff6\005\ufff6\007\ufff6\011\ufff6\001\002\000\010\004" +
    "\022\005\024\011\023\001\002\000\014\006\017\013\016" +
    "\014\015\015\020\016\004\001\002\000\010\002\ufffc\012" +
    "\ufffc\016\ufffc\001\002\000\014\006\017\013\016\014\015" +
    "\015\020\016\004\001\002\000\012\004\ufffa\005\ufffa\007" +
    "\ufffa\011\ufffa\001\002\000\012\004\ufffb\005\024\007\ufffb" +
    "\011\ufffb\001\002\000\010\004\022\005\024\007\030\001" +
    "\002\000\012\004\ufff9\005\ufff9\007\ufff9\011\ufff9\001\002" +
    "\000\014\006\017\013\016\014\015\015\020\016\004\001" +
    "\002\000\010\004\022\005\024\011\033\001\002\000\010" +
    "\002\ufffd\012\ufffd\016\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\012\003\004\004\010\005\006\006\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\020" +
    "\003\013\001\001\000\002\001\001\000\010\003\004\005" +
    "\012\006\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\026\003\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\025\003\013\001" +
    "\001\000\002\001\001\000\006\002\024\003\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\031\003\013\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LangParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LangParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LangParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
               
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.nextToken(); 
    }


    // Connect this parser to a scanner!
    LangLexer s;
    public LangParser(LangLexer s){ this.s=s; }
    // Get the line


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LangParser$actions {
  private final LangParser parser;

  /** Constructor */
  CUP$LangParser$actions(LangParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LangParser$do_action_part00000000(
    int                        CUP$LangParser$act_num,
    java_cup.runtime.lr_parser CUP$LangParser$parser,
    java.util.Stack            CUP$LangParser$stack,
    int                        CUP$LangParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LangParser$result;

      /* select the action based on the action number */
      switch (CUP$LangParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= cmdList 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = l; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("prog",2, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		RESULT = start_val;
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LangParser$parser.done_parsing();
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cmdList ::= cmd cmdList 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Seq(c.getLine(),c.getCol(), c, l); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmdList",3, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cmdList ::= cmd 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = c; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmdList",3, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cmd ::= lhs ATTR expr SEMI 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Attrib(sleft,sright,i,e); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",4, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cmd ::= PRINT expr SEMI 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Print(sleft,sright,e); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",4, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr PLUS expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Plus(oleft,oright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr TIMES expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Times(oleft,oright,e1,e2);  
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= LP expr RP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = e; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= NUMBER 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new IntLit(nleft,nright,n);     
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= TRUE 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new BoolLit(bleft,bright,false); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= FALSE 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new BoolLit(bleft,bright,true);  
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= lhs 
            {
              Exp RESULT =null;
		int lhleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int lhright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp lh = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = lh;         
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lhs ::= ID 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Var(eleft,eright,e);         
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("lhs",1, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LangParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LangParser$do_action(
    int                        CUP$LangParser$act_num,
    java_cup.runtime.lr_parser CUP$LangParser$parser,
    java.util.Stack            CUP$LangParser$stack,
    int                        CUP$LangParser$top)
    throws java.lang.Exception
    {
              return CUP$LangParser$do_action_part00000000(
                               CUP$LangParser$act_num,
                               CUP$LangParser$parser,
                               CUP$LangParser$stack,
                               CUP$LangParser$top);
    }
}

}
