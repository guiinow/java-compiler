%token ID TYID INT FLOAT CHAR BOOL NULL
%token INT_LITERAL FLOAT_LITERAL CHAR_LITERAL STRING_LITERAL TRUE FALSE
%token PLUS MINUS STAR SLASH PERCENT AND OR NOT EQ NEQ LT GT LE GE
%token LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET SEMICOLON COMMA COLON COLONCOLON DOT EQUALS
%token PRINT READ RETURN IF ELSE ITERATE NEW

%%

program : data func ;

data : TYID LBRACE var_decl* RBRACE;

var_decl : ID COLON type SEMICOLON;

type : INT | FLOAT | CHAR | BOOL | TYID;

func : ID COLONCOLON params ARROW type block;

params : ID COLONCOLON type ( COMMA ID COLONCOLON type )*;

block : LBRACE cmd* RBRACE;

cmd : IF LPAREN exp RPAREN block ( ELSE block )?
    | ITERATE LPAREN exp RPAREN block
    | READ lvalue SEMICOLON
    | PRINT exp SEMICOLON
    | RETURN exp? SEMICOLON
    | lvalue EQUALS exp SEMICOLON
    | ID LPAREN exps RPAREN SEMICOLON;

exps : exp ( COMMA exp )*;

exp : exp AND rexp
    | rexp;

rexp : rexp EQ aexp
     | rexp NEQ aexp
     | rexp LT aexp
     | rexp LE aexp
     | rexp GT aexp
     | rexp GE aexp
     | aexp;

aexp : aexp PLUS mexp
     | aexp MINUS mexp
     | mexp;

mexp : mexp STAR sexp
     | mexp SLASH sexp
     | mexp PERCENT sexp
     | sexp;

sexp : NOT sexp
     | pexp;

pexp : LPAREN exp RPAREN
     | lvalue
     | INT_LITERAL
     | FLOAT_LITERAL
     | CHAR_LITERAL
     | STRING_LITERAL
     | TRUE
     | FALSE
     | NULL
     | ID LPAREN exps RPAREN;

lvalue : ID ( DOT ID | LBRACKET exp RBRACKET )*;

%%
